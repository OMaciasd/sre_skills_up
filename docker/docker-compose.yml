services:
  python-microservice:
    build:
      context: .
      dockerfile: Dockerfile
    image: omaciasd/python-microservice:last
    ports:
      - "5000:5000"
    volumes:
      - ./webapp:/app/webapp
    environment:
      - FLASK_APP=webapp:create_app
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB
    restart: always
    depends_on:
      - prometheus
      - postgres
    networks:
      - docker_default

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - python-microservice
    networks:
      - docker_default

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - docker_default
    env_file:
      - ./.env

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_METRICS_ENABLED: "true"
      GF_METRICS_BASIC_AUTH_USERNAME: grafana
      GF_METRICS_BASIC_AUTH_PASSWORD: ${GRAFANA_METRICS_PASSWORD}
      GF_PROMETHEUS_ENDPOINT_ENABLED: "true"
      GF_PROMETHEUS_ENDPOINT_BASIC_AUTH_USERNAME: grafana
      GF_PROMETHEUS_ENDPOINT_BASIC_AUTH_PASSWORD: ${GRAFANA_PROMETHEUS_PASSWORD}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
      GF_SERVER_ROOT_URL: http://localhost:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
      - ./Grafana/prometheus-datasource.json:/etc/grafana/provisioning/datasources/prometheus-datasource.yaml
    networks:
      - docker_default
    depends_on:
      - prometheus

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - docker_default

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
      - "9410:9410"
    environment:
      - STORAGE_TYPE=mem
      - METRICS_EXPORTER=prometheus
    networks:
      - docker_default

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./Loki/loki-config.yaml:/etc/loki/loki-config.yaml
    command: ["-config.file=/etc/loki/local-config.yaml"]
    networks:
      - docker_default

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./promtail/config:/etc/promtail
      - ./Promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml
    command: ["-config.file=/etc/promtail/promtail-config.yaml"]
    networks:
      - docker_default

volumes:
  prometheus-data:
  grafana-data:
    driver: local
  postgres-data:
  loki-data:

networks:
  docker_default:
    driver: bridge
